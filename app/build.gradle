apply plugin: 'com.android.application'
apply from: "$rootDir/config.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        applicationId "com.design.mode"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getVersionCode(true)
        versionName getVersionName(true)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // 签名 配置
    signingConfigs {
        debug {

        }
        release {
            keyAlias appConfig.keyAlias
            keyPassword appConfig.keyPassword
            storeFile file(appConfig.storeFile)
            storePassword appConfig.storePassword
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            buildConfigField 'boolean', 'IS_DEBUG', 'true'
            debuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false

        }
        release {
            buildConfigField 'boolean', 'IS_DEBUG', 'false'
            debuggable false
            zipAlignEnabled true
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        Pro {
            buildConfigField "String", "API_BETA", "\"$appConfig.betaAPI\""
            applicationId appConfig.appId + ".beta"
            manifestPlaceholders = [APP_NAME: appConfig.betaName,
                                    APP_LOGO: appConfig.betaLogo,
                                    PACKAGE : appConfig.appId,
                                    YMANGU: "GooglePlay"
            ]
        }

        Master {
            manifestPlaceholders = [YMANGU: "Baidu",
                                    APP_NAME: appConfig.betaName,
                                    APP_LOGO: appConfig.betaLogo,
                                    PACKAGE : appConfig.appId
            ]
        }

        US {
            manifestPlaceholders = [YMANGU: "Wandoujia",
                                    APP_NAME: appConfig.betaName,
                                    APP_LOGO: appConfig.betaLogo,
                                    PACKAGE : appConfig.appId
            ]
        }
    }

    //自定义apk安装包名
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.name == 'release') {
                variant.mergedFlavor.versionCode = getVersionCode(false)
                variant.mergedFlavor.versionName = getVersionName(false)
                // release
                def apkName = "${project.getName()}_${variant.flavorName}_${buildType.name}_v${variant.versionCode}.apk";
                output.outputFile = new File(output.outputFile.parent, apkName);
            } else {
                variant.mergedFlavor.versionCode = getVersionCode(true)
                variant.mergedFlavor.versionName = getVersionName(true)
                // debug
                def apkName = "${project.getName()}_${buildType.name}.apk";
                output.outputFile = new File(output.outputFile.parent, apkName);
            }
        }

    }
}
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task.doLast() {
            updateVersionCode()
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.facebook.android:facebook-android-sdk:$rootProject.ext.facebookLibVersion"
    compile project(":libCommon")
}

//通过tag 自动命名VersionName
def getVersionName(boolean debug) {
    def cmd = 'git for-each-ref  --sort=-taggerdate --format=\'%(refname)\' --count=1'
    def version = cmd.execute().text.trim()

    def index = version.lastIndexOf("/")
    if (index > 0) {
        version = version.substring(index + 1, version.length() - 1)
    }
    println("version = " + version.toString())
    return version
}

// 获取修订版本 git 提交次数
static def getRevisionNumber() {
    Process process = "git rev-list --count HEAD".execute()
    process.waitFor()
    return process.getText().toInteger()
}

// 获取 version code
static def getVersionCode(boolean isDebug) {
    if (isDebug) {
        return Integer.parseInt(new Date().format("yyyyMMddHH"))
    }
    return getRevisionNumber()
}









